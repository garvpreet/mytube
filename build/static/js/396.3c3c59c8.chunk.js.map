{"version":3,"file":"static/js/396.3c3c59c8.chunk.js","mappings":"qOA2BA,EAzB6B,WAC3B,OACEA,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oFAAmFC,SAAA,EAEhGC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kFAGfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4FAA2FC,SAAA,EACxGF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kCAAqC,QAEpDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kCAAqC,QAEpDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAoC,QAEnDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAoC,YAK3D,E,SC6BA,EAhDwB,SAAHG,GAAkB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAXC,EAAIN,EAAJM,KACzBC,GAA8BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,EAAgB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMO,WAExBC,EAAAA,EAAAA,YAAU,WACRC,GACF,GAAG,IAEH,IAAMA,EAAe,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAd,EAAAe,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACHC,MAAMC,EAAAA,GAAkBd,GAAW,KAAD,EAA3C,OAAJP,EAAIiB,EAAAK,KAAAL,EAAAE,KAAA,EACSnB,EAAKe,OAAO,KAAD,EAAxBA,EAAIE,EAAAK,KACVhB,EAAWS,GAAM,wBAAAE,EAAAM,OAAA,GAAAT,EAAA,KAClB,kBAJoB,OAAAJ,EAAAc,MAAA,KAAAC,UAAA,KAOrB,GAAe,MAAXpB,EAAiB,OAAOZ,EAAAA,EAAAA,KAACiC,EAAoB,IACjD,IAAMC,GAAgB,OAAPtB,QAAO,IAAPA,GAAyB,QAAlBV,EAAPU,EAASuB,MAAM,GAAGC,eAAO,IAAAlC,GAAY,QAAZC,EAAzBD,EAA2BmC,kBAAU,IAAAlC,GAAM,QAANC,EAArCD,EAAuCmC,YAAI,IAAAlC,OAApC,EAAPA,EAA6CmC,MAAO,CAAC,EAEpE,OACE1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4FAA2FC,SAAA,EAExGC,EAAAA,EAAAA,KAAA,OACEF,UAAU,oDACV0C,IAAS,OAAJjC,QAAI,IAAJA,GAAgB,QAAZF,EAAJE,EAAM8B,kBAAU,IAAAhC,GAAQ,QAARC,EAAhBD,EAAkBoC,cAAM,IAAAnC,OAApB,EAAJA,EAA0BiC,OAGjC1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,wCAAuCC,SAChD,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,SAET1C,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kDAAiDC,UAC3D4C,EAAAA,EAAAA,GAAuB,OAAJpC,QAAI,IAAJA,OAAI,EAAJA,EAAMqC,gBAE5B/C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAwB0C,IAAKN,KAC5ClC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qEAAoEC,SAC7E,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,mBAIX7C,EAAAA,EAAAA,KAAA,QAAMF,UAAU,6CAA4CC,SACrD,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,mBAKjB,E,oBCRA,EAlCsB,WACpB,IAAAC,GAAiBC,EAAAA,EAAAA,MACXC,GAD4BtC,EAAAA,EAAAA,GAAAoC,EAAA,GAArB,GACQG,IAAI,KACzB1C,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/C2C,EAAazC,EAAA,GAAE0C,EAAgB1C,EAAA,GAChC2C,GAAaC,EAAAA,EAAAA,OAEnBvC,EAAAA,EAAAA,YAAU,WACRwC,IACAF,GAAWG,EAAAA,EAAAA,MACb,GAAG,CAACP,IAEJ,IAAMM,EAAa,eAAAtD,GAAAiB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAd,EAAAe,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACDC,MAAM8B,EAAAA,GAAqBR,GAAO,KAAD,EAA1C,OAAJ1C,EAAIiB,EAAAK,KAAAL,EAAAE,KAAA,EACSnB,EAAKe,OAAO,KAAD,EAAxBA,EAAIE,EAAAK,KACVuB,EAAqB,OAAJ9B,QAAI,IAAJA,OAAI,EAAJA,EAAMa,OAAO,wBAAAX,EAAAM,OAAA,GAAAT,EAAA,KAC/B,kBAJkB,OAAApB,EAAA8B,MAAA,KAAAC,UAAA,KAMnB,OACEhC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iDAAgDC,SAC5DoD,EAAcO,KAAI,SAACC,GAAM,IAAAC,EAAAC,EAAA,OACxB7D,EAAAA,EAAAA,KAAC8D,EAAAA,GAAI,CAEHC,GAAI,aAAoB,OAANJ,QAAM,IAANA,GAAU,QAAJE,EAANF,EAAQK,UAAE,IAAAH,OAAJ,EAANA,EAAYI,SAC9BC,QAAS,WAAO,IAADC,EACbd,GAAWe,EAAAA,EAAAA,GAAmB,OAANT,QAAM,IAANA,GAAe,QAATQ,EAANR,EAAQvB,eAAO,IAAA+B,OAAT,EAANA,EAAiBrD,WAC3C,EAAEf,UAEFC,EAAAA,EAAAA,KAACqE,EAAe,CAAC9D,KAAY,OAANoD,QAAM,IAANA,OAAM,EAANA,EAAQvB,WANpB,OAANuB,QAAM,IAANA,GAAU,QAAJC,EAAND,EAAQK,UAAE,IAAAJ,OAAJ,EAANA,EAAYK,QAOZ,KAIf,C,oBCvBA,IAnB2B,SAACrB,GAC1B,IAAM0B,EAAgB,IAAIC,KAAK3B,GACzB4B,EAAc,IAAID,KACxB,OAAIC,EAAYC,cAAgBH,EAAcG,cAE1CD,EAAYC,cAAgBH,EAAcG,cAAgB,aAGxDD,EAAYE,WAAaJ,EAAcI,WAClCF,EAAYE,WAAaJ,EAAcI,WAAa,cAEvDF,EAAYG,UAAYL,EAAcK,WAAa,EAAU,QAC7DH,EAAYG,UAAYL,EAAcK,WAAa,EAC9C,YACFH,EAAYG,UAAYL,EAAcK,UAAY,WAG/D,C","sources":["components/ShimmerSearchResults.js","components/SearchVideoCard.js","components/SearchResults.js","components/VideoPublishedTime.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ShimmerSearchResults = () => {\r\n  return (\r\n    <div className=\"grid md:grid-cols-12  bg-gray-50 mb-2 dark:bg-slate-800 max-sm:px-10 max-sm:pb-10\">\r\n      {/* Thumbnail */}\r\n      <div className=\"md:col-span-3 col-span-12 bg-gray-300 mr-2 rounded-lg dark:bg-slate-600 h-40\"></div>\r\n\r\n      {/* Details */}\r\n      <div className=\"max-md:h-40 md:col-span-8 col-span-12 bg-gray-100 grid grid-rows-4 py-1 dark:bg-slate-800\">\r\n        <div className=\"row-span-1  py-2 w-11/12\">\r\n          <p className=\"bg-gray-300 h-1/2 rounded-lg \"></p>{\" \"}\r\n        </div>\r\n        <div className=\"row-span-1  py-2 w-11/12\">\r\n          <p className=\"bg-gray-300 h-1/2 rounded-lg \"></p>{\" \"}\r\n        </div>\r\n        <div className=\"row-span-1  py-2 w-3/4\">\r\n          <p className=\"bg-gray-300 h-1/2 rounded-lg\"></p>{\" \"}\r\n        </div>\r\n        <div className=\"row-span-1  py-2 w-1/2\">\r\n          <p className=\"bg-gray-300 h-1/2 rounded-lg\"></p>{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShimmerSearchResults;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { CHANNEL_IMG_API } from \"../utils/Constants\";\r\nimport ShimmerSearchResults from \"./ShimmerSearchResults\";\r\nimport VideoPublishedTime from \"./VideoPublishedTime\";\r\n\r\nconst SearchVideoCard = ({ data }) => {\r\n  const [details, setDetails] = useState(null);\r\n  const channelId = data?.channelId;\r\n\r\n  useEffect(() => {\r\n    getChannelImage();\r\n  }, []);\r\n\r\n  const getChannelImage = async () => {\r\n    const data = await fetch(CHANNEL_IMG_API + channelId);\r\n    const json = await data.json();\r\n    setDetails(json);\r\n  };\r\n\r\n  // Loading Shimmer\r\n  if (details == null) return <ShimmerSearchResults />;\r\n  const imgUrl = details?.items[0].snippet?.thumbnails?.high?.url || {};\r\n\r\n  return (\r\n    <div className=\"flex max-sm:flex-col flex-row bg-gray-50 py-2 dark:bg-slate-800 max-sm:px-10 max-sm:pb-10\">\r\n      {/* Thumbnail */}\r\n      <img\r\n        className=\"flex justify-center rounded-lg h-40 max-sm:w-full\"\r\n        src={data?.thumbnails?.medium?.url}\r\n      />\r\n      {/* Video Details */}\r\n      <div className=\"px-2 w-full flex flex-col\">\r\n        <span className=\"font-semibold text-lg dark:text-white\">\r\n          {data?.title}\r\n        </span>\r\n        <p className=\"text-sm text-slate-600 mb-2 dark:text-slate-300\">\r\n          {VideoPublishedTime(data?.publishedAt)}\r\n        </p>\r\n        <div className=\"flex items-center\">\r\n          <img className=\"w-8 my-2 rounded-full\" src={imgUrl}></img>\r\n          <span className=\"flex items-center px-2 text-slate-700 text-sm dark:text-slate-200 \">\r\n            {data?.channelTitle}\r\n          </span>\r\n        </div>\r\n        {/* Video Description */}\r\n        <span className=\"text-sm text-slate-700 dark:text-slate-300\">\r\n          {data?.description}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchVideoCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport SearchVideoCard from \"./SearchVideoCard\";\r\n\r\nimport { setChannelId } from \"../utils/ChannelIdSlice\";\r\nimport { closeMenu } from \"../utils/SideMenuSlice\";\r\nimport { SEARCH_RESULTS_API } from \"../utils/Constants\";\r\n\r\nconst SearchResults = () => {\r\n  const [params] = useSearchParams();\r\n  const query = params.get(\"q\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const dispatcher = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getSearchData();\r\n    dispatcher(closeMenu());\r\n  }, [query]);\r\n\r\n  const getSearchData = async () => {\r\n    const data = await fetch(SEARCH_RESULTS_API + query);\r\n    const json = await data.json();\r\n    setSearchResults(json?.items);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-2 w-full dark:bg-slate-800 overflow-y-hidden\">\r\n      {searchResults.map((result) => (\r\n        <Link\r\n          key={result?.id?.videoId}\r\n          to={\"/watch?v=\" + result?.id?.videoId}\r\n          onClick={() => {\r\n            dispatcher(setChannelId(result?.snippet?.channelId));\r\n          }}\r\n        >\r\n          <SearchVideoCard data={result?.snippet} />\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","const VideoPublishedTime = (publishedAt) => {\r\n  const publishedDate = new Date(publishedAt);\r\n  const currentDate = new Date();\r\n  if (currentDate.getFullYear() - publishedDate.getFullYear()) {\r\n    return (\r\n      currentDate.getFullYear() - publishedDate.getFullYear() + \" years ago\"\r\n    );\r\n  } else {\r\n    if (currentDate.getMonth() - publishedDate.getMonth()) {\r\n      return currentDate.getMonth() - publishedDate.getMonth() + \" months ago\";\r\n    } else {\r\n      if (currentDate.getDate() - publishedDate.getDate() == 0) return \"Today\";\r\n      if (currentDate.getDate() - publishedDate.getDate() == 1)\r\n        return \"1 day ago\";\r\n      return currentDate.getDate() - publishedDate.getDate() + \" days ago\";\r\n    }\r\n  }\r\n};\r\n\r\nexport default VideoPublishedTime;\r\n"],"names":["_jsxs","className","children","_jsx","_ref","_details$items$0$snip","_details$items$0$snip2","_details$items$0$snip3","_data$thumbnails","_data$thumbnails$medi","data","_useState","useState","_useState2","_slicedToArray","details","setDetails","channelId","useEffect","getChannelImage","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","json","wrap","_context","prev","next","fetch","CHANNEL_IMG_API","sent","stop","apply","arguments","ShimmerSearchResults","imgUrl","items","snippet","thumbnails","high","url","src","medium","title","VideoPublishedTime","publishedAt","channelTitle","description","_useSearchParams","useSearchParams","query","get","searchResults","setSearchResults","dispatcher","useDispatch","getSearchData","closeMenu","SEARCH_RESULTS_API","map","result","_result$id","_result$id2","Link","to","id","videoId","onClick","_result$snippet","setChannelId","SearchVideoCard","publishedDate","Date","currentDate","getFullYear","getMonth","getDate"],"sourceRoot":""}